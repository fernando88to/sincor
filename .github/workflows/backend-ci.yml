name: Backend CI

on:
  push:
    paths:
      - 'backend/**' # dispara apenas se houver mudanças no backend
  pull_request:
    paths:
      - 'backend/**'

jobs:
  test-backend:
    name: Run Backend Tests
    runs-on: ubuntu-22.04

    services:
      mysql:
        image: mysql:8.0.43
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: sincordb
          MYSQL_USER: appuser
          MYSQL_PASSWORD: apppassword
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1. Checkout do código do repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Instala o Java 21
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # ... existing code ...

      # 3. Configura cache do Gradle
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Aguarda o MySQL subir
      - name: Wait for MySQL
        run: |
          for i in {1..15}; do
            nc -z localhost 3306 && echo "MySQL is up!" && exit 0
            echo "Waiting for MySQL..."
            sleep 4
          done
          echo "MySQL did not start in time" && exit 1

      # 5. Configura variáveis de ambiente para testes
#      - name: Set environment variables
#        run: |
#          echo "DB_HOST=localhost" >> $GITHUB_ENV
#          echo "DB_PORT=3306" >> $GITHUB_ENV
#          echo "DB_NAME=backend_test" >> $GITHUB_ENV
#          echo "DB_USER=backend_user" >> $GITHUB_ENV
#          echo "DB_PASS=backend_pass" >> $GITHUB_ENV

      # 6. Executa os testes do backend
      - name: Run tests
        working-directory: backend
        run: ./gradlew test --continue

      # 6. Upload test reports as artifacts (sempre executa, mesmo se os testes falharem)
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-reports-${{ github.run_number }}
          path: |
            backend/build/reports/tests/test/
            backend/build/test-results/test/
          retention-days: 30

      # 7. Upload build logs em caso de falha
      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: backend-build-logs-${{ github.run_number }}
          path: |
            backend/build/reports/
            backend/build/tmp/compileTestJava/
          retention-days: 7

      # 8. Publish test results
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            backend/build/test-results/test/*.xml
